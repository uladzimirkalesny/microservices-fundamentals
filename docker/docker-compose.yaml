version: '3.9'

services:
  resource-processor:
    container_name: resource-processor
    build:
      context: ../resource-processor
      dockerfile: Dockerfile
    image: resource-processor:latest
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PWD=${RABBITMQ_PWD}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    ports:
      - "8083:8083"
    depends_on:
      rabbitmq:
        condition: service_healthy
      song-service:
        condition: service_started
      resource-service:
        condition: service_started
      eureka-service:
        condition: service_started

  song-service-database:
    container_name: song-service-database
    image: gvenzl/oracle-xe:latest
    ports:
      - "1521:1521"
    environment:
      - ORACLE_PASSWORD=${SONG_SERVICE_ORACLE_PASSWORD}
      - ORACLE_DATABASE=${SONG_SERVICE_ORACLE_DATABASE}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    healthcheck:
      test: [ "CMD", "healthcheck.sh" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      eureka-service:
        condition: service_started

  song-service:
    container_name: song-service
    build:
      context: ../song-service
      dockerfile: Dockerfile
    image: song-service:latest
    ports:
      - "8082:8082"
    environment:
      - SONG_SERVICE_ORACLE=${SONG_SERVICE_ORACLE}
      - SONG_SERVICE_ORACLE_PORT=${SONG_SERVICE_ORACLE_PORT}
      - ORACLE_PASSWORD=${SONG_SERVICE_ORACLE_PASSWORD}
      - ORACLE_USER=${SONG_SERVICE_ORACLE_USER}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    depends_on:
      song-service-database:
        condition: service_healthy
      eureka-service:
        condition: service_started
      api-gateway:
        condition: service_started

  resource-service-database:
    container_name: resource-service-database
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${RESOURCE_SERVICE_DATABASE_POSTGRES_DB}
      - POSTGRES_PASSWORD=${RESOURCE_SERVICE_DATABASE_POSTGRES_PWD}
      - POSTGRES_USER=${RESOURCE_SERVICE_DATABASE_POSTGRES_USR}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      eureka-service:
        condition: service_started

  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      resource-service-database:
        condition: service_healthy
      eureka-service:
        condition: service_started

  resource-service:
    container_name: resource-service
    build:
      context: ../resource-service
      dockerfile: Dockerfile
    image: resource-service:latest
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PWD=${RABBITMQ_PWD}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION_NAME=${AWS_REGION_NAME}
      - RESOURCE_SERVICE_DATABASE_POSTGRES_PWD=${RESOURCE_SERVICE_DATABASE_POSTGRES_PWD}
      - RESOURCE_SERVICE_DATABASE_POSTGRES_USR=${RESOURCE_SERVICE_DATABASE_POSTGRES_USR}
      - RESOURCE_SERVICE_POSTGRES=${RESOURCE_SERVICE_POSTGRES}
      - RESOURCE_SERVICE_POSTGRES_PORT=${RESOURCE_SERVICE_POSTGRES_PORT}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    ports:
      - "8081:8081"
    depends_on:
      resource-service-database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-service:
        condition: service_started
      api-gateway:
        condition: service_started

  eureka-service:
    container_name: eureka-service
    build:
      context: ../eureka-server
      dockerfile: ./Dockerfile
    ports:
      - "8761:8761"
    environment:
      - EUREKA_ZONE=http://eureka-service:8761/eureka
  
  api-gateway:
    container_name: api-gateway
    build:
      context: ../api-gateway
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    environment:
      EUREKA_ZONE: http://eureka-service:8761/eureka
    depends_on:
      eureka-service:
        condition: service_started

  storage-service-database:
    container_name: storage-service-database
    image: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=${STORAGE_SERVICE_DATABASE_POSTGRES_DB}
      - POSTGRES_PASSWORD=${STORAGE_SERVICE_DATABASE_POSTGRES_PWD}
      - POSTGRES_USER=${STORAGE_SERVICE_DATABASE_POSTGRES_USR}
      - EUREKA_ZONE=http://eureka-service:8761/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      eureka-service:
        condition: service_started

  storage-service:
    container_name: storage-service
    build:
      context: ../storage-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - STORAGE_SERVICE_DATABASE_POSTGRES_PWD=${STORAGE_SERVICE_DATABASE_POSTGRES_PWD}
      - STORAGE_SERVICE_DATABASE_POSTGRES_USR=${STORAGE_SERVICE_DATABASE_POSTGRES_USR}
      - STORAGE_SERVICE_POSTGRES=${STORAGE_SERVICE_POSTGRES}
      - STORAGE_SERVICE_POSTGRES_PORT=${STORAGE_SERVICE_POSTGRES_PORT}
      - EUREKA_ZONE=http://eureka-service:8761/eureka
    depends_on:
      storage-service-database:
        condition: service_healthy
      eureka-service:
        condition: service_started
      api-gateway:
        condition: service_started

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.2
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.2
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.3.2
    container_name: logstash
    # Load Logstash configuration from specifying file/directory
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    # Mount directory with configuration file into running Logstash container
    volumes:
      - ./logstash:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
      - kibana

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
    - "9090:9090"

  grafana:
    image: "grafana/grafana:latest"
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - "3000:3000"

  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    restart: always
    environment:
      KEYCLOAK_VERSION: 6.0.1
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_HOSTNAME: keycloak
      KEYCLOAK_HTTP_PORT: 8100
    command:
      - "-Djboss.http.port=8100"
    ports:
      - "8100:8100"

volumes:
  elasticsearch-data-volume:
    driver: local